function [deltaV_o] = optimalDVSolver(inputVec, pSettings)
    global d_solution paramVector resultVector deltaResult theta_vec pState; 

%     global orbit1 orbit2 bodyRadius theta_vec_acc;

    if pSettings.solveDate == 1
        pState.currentTime = inputVec(1);
        pState.tof_current = inputVec(2);
    else
        pState.tof_current = inputVec;
    end

    trueSolution = 0;
    N_start = pState.N;

    if useMultiorbitFilling == 1
        N_end = pSettings.maxDepthN
    else
        N_end = N_start;
    end
    for N_current = N_start:N_end
        pState.N = N_test;
        updateParameters(0, pSettings);
        
        d_minimum = resultVector(1);
        d_maximum = resultVector(2);
    
        try
            tfTimeHandle = @(d_in) transferTimeSolution(d_in, paramVector, pState.tof_current, theta_vec);
            d_solution = fzero(tfTimeHandle, [d_minimum, d_maximum], pSettings.opt_tof_fzero);
    
            deltaV_o = trapz(theta_vec, abs(fJerkFunction(d_solution, theta_vec, paramVector)));
            trueSolution = 1;
        catch
            d_solution = 0;
            deltaV_o = 1e24; %A big number
        end

        if deltaV_o < localBestDV
            localBestDV = deltaV_o;
            if pSettings.plotTransferWindow == 1
                    R_Multiplier = (3*(deltaV_o/pState.initial_DeltaV)^2 - 2*(deltaV_o/pState.initial_DeltaV)^3);
                    G_Multiplier = 1-(3*((deltaV_o-pState.initial_DeltaV)/pState.initial_DeltaV)^2 - 2*((deltaV_o-pState.initial_DeltaV)/pState.initial_DeltaV)^3);
                
                    if deltaV_o > 2*pState.initial_DeltaV
                        color = [1 0 0];
                    elseif deltaV_o > pState.initial_DeltaV
                        color = [1 G_Multiplier 0];
                    elseif deltaV_o <= pState.initial_DeltaV
                        color = [R_Multiplier 1 0];
                    end
            
                    rectangle('Position',[pState.currentTime-0.5*pSettings.tfWindowPixelsX, pState.tof_current-0.5*pSettings.tfWindowPixelsY, ...
                                          pSettings.tfWindowPixelsX, pSettings.tfWindowPixelsY], 'FaceColor', color.*(0.5 + 0.5 * trueSolution), 'EdgeColor',color.*(0.5 + 0.5 * trueSolution));
                   
            %         pause(0);
                    
            end   
        end
    end
%         if pSettings.useMultiorbitFilling == 1
%             while (trueSolution == 0) && (pState.N < 4)
%                 pState.N = pState.N + 1;
%                 updateParameters(0, pSettings);
%     
%                 try
%                     tfTimeHandle = @(d_in) transferTimeSolution(d_in, paramVector, pState.tof_current, theta_vec);
%                     d_solution = fzero(tfTimeHandle, [d_minimum, d_maximum], pSettings.opt_tof_fzero);
%             
%                     deltaV_o = trapz(theta_vec, abs(fJerkFunction(d_solution, theta_vec, paramVector)));
%                     trueSolution = 1;
%                 catch
%                     d_solution = 0;
%                     deltaV_o = 1e24; %A big number
%                     trueSolution = 0;
%                 end
%             end
%         end
%     
%         if pSettings.useMultiorbitFilling == 1
%             pState.N = 0;
%         end
%     
        if deltaV_o < deltaResult
            %Save best results as globals
            global dateOptimal tof_optimal d_opt;
            global paramVector_opt
    
            deltaResult = deltaV_o;
            d_opt = d_solution;
    
            dateOptimal = pState.currentTime;
            tof_optimal = pState.tof_current;
    
            paramVector_opt = paramVector;
        end

        

%     if pSettings.plotTransferWindow == 1
% %         figure(1)
% %         hold off;
% %         plot(orbit1(1,:), orbit1(2,:), 'LineStyle',':', LineWidth=2);
% %         hold on;
% %         plot(orbit2(1,:), orbit2(2,:), 'LineStyle',':', LineWidth=2);
% %         
% %         plot(cos(paramVector(9)) * paramVector(7), sin(paramVector(9)) * paramVector(7),'or', 'MarkerSize',5,'MarkerFaceColor','g')
% %         plot(cos(paramVector(10)) * paramVector(8), sin(paramVector(10)) * paramVector(8),'or', 'MarkerSize',5,'MarkerFaceColor','r')
% %         plot(cos(pSettings.omega2 + paramVector(11)) * paramVector(12), sin(pSettings.omega2 + paramVector(11)) * paramVector(12),'or', 'MarkerSize',5,'MarkerFaceColor','k')
% %                 
% %         rectangle('Position',[-bodyRadius, -bodyRadius, 2*bodyRadius, 2*bodyRadius],'Curvature',[1 1], 'FaceColor',"yellow")
% %         
% %         x = cos(theta_vec_acc+paramVector(9)) .* fRadiusFunction(d_solution, theta_vec_acc, paramVector);
% %         y = sin(theta_vec_acc+paramVector(9)) .* fRadiusFunction(d_solution, theta_vec_acc, paramVector);
% %         plot(x, y, "Color", [0.2 0.7 0.2] * (0.5 + 0.5 * trueSolution));
% % 
% %         if trueSolution == 0
% %             x = cos(theta_vec_acc+paramVector(9)) .* fRadiusFunction(d_minimum, theta_vec_acc, paramVector);
% %             y = sin(theta_vec_acc+paramVector(9)) .* fRadiusFunction(d_minimum, theta_vec_acc, paramVector);
% %             plot(x, y, "Color", [0.5 0.7 0.2]);
% %             
% %             x = cos(theta_vec_acc+paramVector(9)) .* fRadiusFunction(d_maximum, theta_vec_acc, paramVector);
% %             y = sin(theta_vec_acc+paramVector(9)) .* fRadiusFunction(d_maximum, theta_vec_acc, paramVector);
% %             plot(x, y, "Color", [0.2 0.7 0.5]);
% % 
% %             time_min = trapz(theta_vec, fTimeFunction(d_maximum, theta_vec, paramVector))
% %             pState.tof_current
% %             time_max = trapz(theta_vec, fTimeFunction(d_minimum, theta_vec, paramVector))
% %             pause(0);
% %         end
% 
%         % --paramVector(_opt) structure--
%         % 1:  mju
%         % 2:  gamma1(_opt)
%         % 3:  gamma2(_opt)
%         % 4:  theta_f(_opt)
%         % 5:  theta1_dot(_opt)
%         % 6:  theta2_dot(_opt)
%         % 7:  r1(_opt)
%         % 8:  r2(_opt)
%         % 9:  theta1(_opt)
%         % 10: theta2(_opt)
%         % 11: nu2_i(_opt)
%         % 12: r2_i(_opt)
% 
% %         figure(2);
% %         hold on;
%         R_Multiplier = (3*(deltaV_o/pState.initial_DeltaV)^2 - 2*(deltaV_o/pState.initial_DeltaV)^3);
%         G_Multiplier = 1-(3*((deltaV_o-pState.initial_DeltaV)/pState.initial_DeltaV)^2 - 2*((deltaV_o-pState.initial_DeltaV)/pState.initial_DeltaV)^3);
%     
%         if deltaV_o > 2*pState.initial_DeltaV
%             color = [1 0 0];
%         elseif deltaV_o > pState.initial_DeltaV
%             color = [1 G_Multiplier 0];
%         elseif deltaV_o <= pState.initial_DeltaV
%             color = [R_Multiplier 1 0];
%         end
% 
%         rectangle('Position',[pState.currentTime-0.5*pSettings.tfWindowPixelsX, pState.tof_current-0.5*pSettings.tfWindowPixelsY, ...
%                               pSettings.tfWindowPixelsX, pSettings.tfWindowPixelsY], 'FaceColor', color.*(0.5 + 0.5 * trueSolution), 'EdgeColor',color.*(0.5 + 0.5 * trueSolution));
%        
% %         pause(0);
%         
%     end
end

